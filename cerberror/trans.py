"""
This module contains Translator class which translates errors generated by Cerberus to messages defined by a user.

"""
from pathlib import Path

from cerberus import Validator

from cerberror.paths import PathFinder


class Translator:
    """
    Translator allows to customize error messages produced by the Cerberus Validator.

    """

    def __init__(self, validator: Validator, path_to_file: str) -> None:
        """
        Initialize an object and trigger internal computations.

        Parameters
        ----------
        validator : Cerberus object.
        path_to_file : A name of the file storing customized error messages.

        """
        self._validator = validator
        self._path_to_file = Path(path_to_file)
        self._any_error = False
        self._error_list = list()
        self._paths = None
        self._user_defined_records = None
        self._errors = dict()

    def get_paths(self) -> tuple:
        """
        Get paths to all elements of Cerberus error nested dictionaries.

        Returns
        -------
        tuple : A list of all paths.

        """
        path_finder = PathFinder(self._validator.errors)
        self._paths = path_finder.paths

        if self._paths == ():
            self._report_error("No path was found")

        return self._paths

    def _report_error(self, *errors: str) -> None:
        """
        Notify occurred errors.

        """
        self._any_error = True

        for error in errors:
            self._error_list.append(error)

        self._errors = self._validator.errors
